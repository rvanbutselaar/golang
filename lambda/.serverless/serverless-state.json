{
  "service": {
    "service": "codingguild-ronald",
    "serviceObject": {
      "name": "codingguild-ronald"
    },
    "provider": {
      "name": "aws",
      "runtime": "go1.x",
      "lambdaHashingVersion": "20201221",
      "region": "eu-central-1",
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:DescribeTable",
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": [
            {
              "Fn::GetAtt": [
                "DynamoDB",
                "Arn"
              ]
            }
          ]
        }
      ],
      "stage": "dev",
      "versionFunctions": true,
      "environment": {
        "IS_LOCAL": "true"
      },
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "HelloLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/codingguild-ronald-dev-hello"
            }
          },
          "WorldLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/codingguild-ronald-dev-world"
            }
          },
          "AlbumsGetLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/codingguild-ronald-dev-albumsGet"
            }
          },
          "AlbumsPostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/codingguild-ronald-dev-albumsPost"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "codingguild-ronald",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/codingguild-ronald-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/codingguild-ronald-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "codingguild-ronald",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "HelloLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/codingguild-ronald/dev/1635594845450-2021-10-30T11:54:05.450Z/codingguild-ronald.zip"
              },
              "Handler": "bin/hello",
              "Runtime": "go1.x",
              "FunctionName": "codingguild-ronald-dev-hello",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "IS_LOCAL": "true"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HelloLogGroup"
            ]
          },
          "WorldLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/codingguild-ronald/dev/1635594845450-2021-10-30T11:54:05.450Z/codingguild-ronald.zip"
              },
              "Handler": "bin/world",
              "Runtime": "go1.x",
              "FunctionName": "codingguild-ronald-dev-world",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "IS_LOCAL": "true"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "WorldLogGroup"
            ]
          },
          "AlbumsGetLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/codingguild-ronald/dev/1635594845450-2021-10-30T11:54:05.450Z/codingguild-ronald.zip"
              },
              "Handler": "bin/albumsGet",
              "Runtime": "go1.x",
              "FunctionName": "codingguild-ronald-dev-albumsGet",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "IS_LOCAL": "true"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AlbumsGetLogGroup"
            ]
          },
          "AlbumsPostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/codingguild-ronald/dev/1635594845450-2021-10-30T11:54:05.450Z/codingguild-ronald.zip"
              },
              "Handler": "bin/albumsPost",
              "Runtime": "go1.x",
              "FunctionName": "codingguild-ronald-dev-albumsPost",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "IS_LOCAL": "true"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AlbumsPostLogGroup"
            ]
          },
          "HelloLambdaVersionlIHcu7OBgZaWeaZJ2n9qYyMRPZgdrmlBcXgrw3dE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HelloLambdaFunction"
              },
              "CodeSha256": "A04PaIsI7Q6MvRFY7rHOJgcbBM+nzRFE0oXTjFE7Exc="
            }
          },
          "WorldLambdaVersionIVhTvxa7NXPo4uSHYHVFaYW5vSsrOmGdpolHuE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WorldLambdaFunction"
              },
              "CodeSha256": "A04PaIsI7Q6MvRFY7rHOJgcbBM+nzRFE0oXTjFE7Exc="
            }
          },
          "AlbumsGetLambdaVersion1I1plhAVrkk1T4n2H0T1THDm2qMWo47dYiV18Nxk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AlbumsGetLambdaFunction"
              },
              "CodeSha256": "A04PaIsI7Q6MvRFY7rHOJgcbBM+nzRFE0oXTjFE7Exc="
            }
          },
          "AlbumsPostLambdaVersionDP2I3c0mNnYMLyKUCJ57LnJ3R4JlJwPtuNmxdT5GY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AlbumsPostLambdaFunction"
              },
              "CodeSha256": "A04PaIsI7Q6MvRFY7rHOJgcbBM+nzRFE0oXTjFE7Exc="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-codingguild-ronald",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "HelloLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HelloLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationHello": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"HelloLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetHello": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /hello",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationHello"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationHello"
          },
          "WorldLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WorldLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationWorld": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"WorldLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetWorld": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /world",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationWorld"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationWorld"
          },
          "AlbumsGetLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AlbumsGetLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationAlbumsGet": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AlbumsGetLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetAlbumsGet": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /albums/get",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationAlbumsGet"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationAlbumsGet"
          },
          "AlbumsPostLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AlbumsPostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationAlbumsPost": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AlbumsPostLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRoutePostAlbumsPost": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /albums/post",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationAlbumsPost"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationAlbumsPost"
          },
          "DynamoDB": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "RonaldAlbums",
              "AttributeDefinitions": [
                {
                  "AttributeName": "Title",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "Artist",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "Title",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "Artist",
                  "KeyType": "RANGE"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "Tags": [
                {
                  "Key": "owner",
                  "Value": "ronald"
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-codingguild-ronald-dev-ServerlessDeploymentBucketName"
            }
          },
          "HelloLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HelloLambdaVersionlIHcu7OBgZaWeaZJ2n9qYyMRPZgdrmlBcXgrw3dE"
            },
            "Export": {
              "Name": "sls-codingguild-ronald-dev-HelloLambdaFunctionQualifiedArn"
            }
          },
          "WorldLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WorldLambdaVersionIVhTvxa7NXPo4uSHYHVFaYW5vSsrOmGdpolHuE"
            },
            "Export": {
              "Name": "sls-codingguild-ronald-dev-WorldLambdaFunctionQualifiedArn"
            }
          },
          "AlbumsGetLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AlbumsGetLambdaVersion1I1plhAVrkk1T4n2H0T1THDm2qMWo47dYiV18Nxk"
            },
            "Export": {
              "Name": "sls-codingguild-ronald-dev-AlbumsGetLambdaFunctionQualifiedArn"
            }
          },
          "AlbumsPostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AlbumsPostLambdaVersionDP2I3c0mNnYMLyKUCJ57LnJ3R4JlJwPtuNmxdT5GY"
            },
            "Export": {
              "Name": "sls-codingguild-ronald-dev-AlbumsPostLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-codingguild-ronald-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-codingguild-ronald-dev-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "hello": {
        "handler": "bin/hello",
        "events": [
          {
            "httpApi": {
              "path": "/hello",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/hello"
          }
        ],
        "name": "codingguild-ronald-dev-hello",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "go1.x",
        "vpc": {},
        "versionLogicalId": "HelloLambdaVersionlIHcu7OBgZaWeaZJ2n9qYyMRPZgdrmlBcXgrw3dE"
      },
      "world": {
        "handler": "bin/world",
        "events": [
          {
            "httpApi": {
              "path": "/world",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/world"
          }
        ],
        "name": "codingguild-ronald-dev-world",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "go1.x",
        "vpc": {},
        "versionLogicalId": "WorldLambdaVersionIVhTvxa7NXPo4uSHYHVFaYW5vSsrOmGdpolHuE"
      },
      "albumsGet": {
        "handler": "bin/albumsGet",
        "events": [
          {
            "httpApi": {
              "path": "/albums/get",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/albums/get"
          }
        ],
        "name": "codingguild-ronald-dev-albumsGet",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "go1.x",
        "vpc": {},
        "versionLogicalId": "AlbumsGetLambdaVersion1I1plhAVrkk1T4n2H0T1THDm2qMWo47dYiV18Nxk"
      },
      "albumsPost": {
        "handler": "bin/albumsPost",
        "events": [
          {
            "httpApi": {
              "path": "/albums/post",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/albums/post"
          }
        ],
        "name": "codingguild-ronald-dev-albumsPost",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "go1.x",
        "vpc": {},
        "versionLogicalId": "AlbumsPostLambdaVersionDP2I3c0mNnYMLyKUCJ57LnJ3R4JlJwPtuNmxdT5GY"
      }
    },
    "resources": {
      "Resources": {
        "DynamoDB": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "RonaldAlbums",
            "AttributeDefinitions": [
              {
                "AttributeName": "Title",
                "AttributeType": "S"
              },
              {
                "AttributeName": "Artist",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "Title",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "Artist",
                "KeyType": "RANGE"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "Tags": [
              {
                "Key": "owner",
                "Value": "ronald"
              }
            ]
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "frameworkVersion": "2",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "package": {
        "patterns": [
          "!./**",
          "./bin/**"
        ],
        "artifact": "/Users/ronaldb/personal/golang/lambda/.serverless/codingguild-ronald.zip",
        "artifactDirectoryName": "serverless/codingguild-ronald/dev/1635594845450-2021-10-30T11:54:05.450Z"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/Users/ronaldb/personal/golang/lambda/.serverless/codingguild-ronald.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/codingguild-ronald/dev/1635594845450-2021-10-30T11:54:05.450Z",
    "artifact": "codingguild-ronald.zip"
  }
}